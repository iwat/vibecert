#!/bin/bash

# Comprehensive test script for VibeCert delete command functionality
# Tests all aspects of certificate deletion including edge cases

set -e

echo "=== VibeCert Delete Command Test Suite ==="
echo

# Build the application
echo "Building VibeCert..."
go build -o vibecert .
echo "âœ“ Build successful"
echo

# Test database file
TEST_DB="./delete-test.db"

# Clean up any existing test database
rm -f "$TEST_DB"

echo "=== Test 1: Basic Certificate Deletion ==="
echo "Setting up test certificates..."

# Import certificates to create a test scenario
./vibecert --db "$TEST_DB" import --cert data/certs/017fdecacc5a70c86718302887a6cdb1.crt
./vibecert --db "$TEST_DB" import --cert data/certs/3f4d405464f4e7ee03225bded9d58345.crt --key data/keys/3f4d405464f4e7ee03225bded9d58345.key
./vibecert --db "$TEST_DB" import --cert data/certs/7bf09aea9e8e03f0fbe5dc0c4083d985.crt --key data/keys/7bf09aea9e8e03f0fbe5dc0c4083d985.key

echo "Initial certificate tree:"
./vibecert --db "$TEST_DB" tree
echo

echo "=== Test 2: Delete Cancellation ==="
echo "Testing user cancellation (responding 'n')..."
echo "n" | ./vibecert --db "$TEST_DB" delete --serial 017fdecacc5a70c86718302887a6cdb1
echo "âœ“ Delete cancelled successfully"

echo "Tree after cancelled deletion (should be unchanged):"
./vibecert --db "$TEST_DB" tree
echo

echo "=== Test 3: Certificate with Private Key Deletion ==="
echo "Deleting certificate with private key using --force..."
./vibecert --db "$TEST_DB" delete --serial 3f4d405464f4e7ee03225bded9d58345 --force
echo "âœ“ Certificate with private key deleted"

echo "Tree after deletion:"
./vibecert --db "$TEST_DB" tree
echo

echo "=== Test 4: Certificate without Private Key Deletion ==="
echo "Attempting to delete parent certificate (should warn about children)..."
echo "y" | echo "y" | ./vibecert --db "$TEST_DB" delete --serial 017fdecacc5a70c86718302887a6cdb1
echo "âœ“ Parent certificate deletion with warning completed"

echo "Final tree:"
./vibecert --db "$TEST_DB" tree
echo

echo "=== Test 5: Error Handling ==="
echo "Testing deletion of non-existent certificate..."
./vibecert --db "$TEST_DB" delete --serial nonexistent --force 2>&1 || echo "âœ“ Properly handled non-existent certificate"
echo

echo "Testing deletion with missing serial parameter..."
./vibecert --db "$TEST_DB" delete --force 2>&1 || echo "âœ“ Properly handled missing serial parameter"
echo

echo "=== Test 6: Shared Key Scenario ==="
echo "Setting up scenario with shared private keys..."
rm -f "$TEST_DB"

# Import the same key file with different certificates (simulating renewal scenario)
./vibecert --db "$TEST_DB" import --cert data/certs/7bf09aea9e8e03f0fbe5dc0c4083d985.crt --key data/keys/7bf09aea9e8e03f0fbe5dc0c4083d985.key

# Check key count before deletion
KEY_COUNT_BEFORE=$(sqlite3 "$TEST_DB" "SELECT COUNT(*) FROM keys;" 2>/dev/null || echo "0")
echo "Keys in database before deletion: $KEY_COUNT_BEFORE"

# Delete certificate
./vibecert --db "$TEST_DB" delete --serial 7bf09aea9e8e03f0fbe5dc0c4083d985 --force

# Check key count after deletion
KEY_COUNT_AFTER=$(sqlite3 "$TEST_DB" "SELECT COUNT(*) FROM keys;" 2>/dev/null || echo "0")
echo "Keys in database after deletion: $KEY_COUNT_AFTER"

if [ "$KEY_COUNT_BEFORE" -gt "$KEY_COUNT_AFTER" ]; then
    echo "âœ“ Private key was deleted when no longer needed"
else
    echo "â„¹ Key preserved (this is expected if other certificates use the same key)"
fi
echo

echo "=== Test 7: Transaction Atomicity ==="
echo "Testing that deletion is atomic (either all succeeds or all fails)..."

# Create a test scenario
rm -f "$TEST_DB"
./vibecert --db "$TEST_DB" import --cert data/certs/017fdecacc5a70c86718302887a6cdb1.crt

# Count certificates before
CERT_COUNT_BEFORE=$(sqlite3 "$TEST_DB" "SELECT COUNT(*) FROM certificates;" 2>/dev/null || echo "0")
echo "Certificates before deletion: $CERT_COUNT_BEFORE"

# Delete certificate
./vibecert --db "$TEST_DB" delete --serial 017fdecacc5a70c86718302887a6cdb1 --force

# Count certificates after
CERT_COUNT_AFTER=$(sqlite3 "$TEST_DB" "SELECT COUNT(*) FROM certificates;" 2>/dev/null || echo "0")
echo "Certificates after deletion: $CERT_COUNT_AFTER"

if [ "$CERT_COUNT_AFTER" -eq 0 ]; then
    echo "âœ“ Atomic deletion successful"
else
    echo "âœ— Atomic deletion failed"
    exit 1
fi
echo

echo "=== Test 8: Help and Usage ==="
echo "Testing delete command help..."
./vibecert delete --help > /dev/null
echo "âœ“ Help message displays correctly"
echo

echo "=== Test 9: Database Consistency ==="
echo "Verifying database integrity after deletions..."

# Create test data
rm -f "$TEST_DB"
./vibecert --db "$TEST_DB" import --cert data/certs/017fdecacc5a70c86718302887a6cdb1.crt
./vibecert --db "$TEST_DB" import --cert data/certs/3f4d405464f4e7ee03225bded9d58345.crt --key data/keys/3f4d405464f4e7ee03225bded9d58345.key

# Check database integrity
if command -v sqlite3 >/dev/null 2>&1; then
    sqlite3 "$TEST_DB" "PRAGMA integrity_check;" > /dev/null
    echo "âœ“ Database integrity maintained"

    # Check for orphaned keys
    ORPHANED_KEYS=$(sqlite3 "$TEST_DB" "
        SELECT COUNT(*)
        FROM keys k
        LEFT JOIN certificates c ON k.public_key_hash = c.key_hash
        WHERE c.key_hash IS NULL;
    " 2>/dev/null || echo "0")

    echo "Orphaned keys in database: $ORPHANED_KEYS"
else
    echo "â„¹ sqlite3 not available, skipping detailed integrity checks"
fi
echo

echo "=== Test 10: Edge Cases ==="
echo "Testing edge cases..."

# Test with empty database
rm -f "$TEST_DB"
./vibecert --db "$TEST_DB" tree > /dev/null  # Initialize empty database
./vibecert --db "$TEST_DB" delete --serial anything --force 2>&1 || echo "âœ“ Handled deletion from empty database"

# Test with special characters in serial
./vibecert --db "$TEST_DB" delete --serial "special!@#$%^&*()" --force 2>&1 || echo "âœ“ Handled special characters in serial"

echo

echo "=== Cleanup ==="
echo "Removing test database..."
rm -f "$TEST_DB"
echo "âœ“ Test database cleaned up"
echo

echo "=== Test Summary ==="
echo "âœ“ Basic certificate deletion works"
echo "âœ“ User cancellation works"
echo "âœ“ Private key deletion works"
echo "âœ“ Parent certificate warnings work"
echo "âœ“ Error handling for non-existent certificates works"
echo "âœ“ Parameter validation works"
echo "âœ“ Shared key scenarios handled"
echo "âœ“ Transaction atomicity verified"
echo "âœ“ Help command works"
echo "âœ“ Database consistency maintained"
echo "âœ“ Edge cases handled gracefully"
echo

echo "All delete command tests passed! ðŸŽ‰"
